on:
  push:
    branches:
      - main

jobs:
  depoly-job:
    runs-on: ubuntu-latest
    steps:

      - name: aws-credential 검사.
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: aws ecr 로그인.
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: repo 가져오기.
        uses: actions/checkout@v4

      - name: jdk 설치s
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: yml 파일 작성.
        run: echo ${{secrets.APPLICATION}} > ./src/main/resources/application.yml

      - name: build
        run: |
          chmod +x ./gradlew
          ./gradlew clean build
          ls -l build/libs/

      - name: docker build and push
        run: |
         ls -l build/libs/
         docker build -t ${{steps.ecr-login.outputs.registry}}/spring-server:v1 .
         docker push ${{steps.ecr-login.outputs.registry}}/spring-server:v1

      - name: Verify ECR login
        run: |
          echo "Verifying AWS ECR login"
          docker info

      - name: ssh ecr 원격 접속.
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USERNAME}}
          key: ${{secrets.KEYPAIR}}
          script_stop: true
          script: |
            sudo systemctl start docker
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{steps.ecr-login.outputs.registry}}
            docker stop spring-server || true
            docker rm spring-server || true
            docker pull ${{steps.ecr-login.outputs.registry}}/spring-server:v1
            docker run -d -p 8080:8080 --name spring-server ${{steps.ecr-login.outputs.registry}}/spring-server:v1